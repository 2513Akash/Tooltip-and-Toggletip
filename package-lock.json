// import { useRef, useLayoutEffect, useState, useEffect, useId } from "react";
// import { createPortal } from "react-dom";

// // ANIMATION SESSION MANAGEMENT
// let globalAnimationEnabled = true;
// let animationTimeout = null;

// const resetAnimationSession = () => {
//   clearTimeout(animationTimeout);
//   animationTimeout = setTimeout(() => {
//     globalAnimationEnabled = true;
//   }, 1000);
// };

// // POSITION PRIORITY LIST
// const POSITION_PRIORITY = [
//   "BOTTOM_CENTER",
//   "BOTTOM_RIGHT",
//   "BOTTOM_LEFT",
//   "TOP_CENTER",
//   "TOP_RIGHT",
//   "TOP_LEFT",
//   "MIDDLE_RIGHT",
//   "MIDDLE_LEFT",
//   "MIDDLE_CENTER",
// ];

// // MIRROR POSITION MAPPING
// const POSITION_MIRROR = {
//   BOTTOM_CENTER: "TOP_CENTER",
//   TOP_CENTER: "BOTTOM_CENTER",
//   BOTTOM_RIGHT: "TOP_RIGHT",
//   BOTTOM_LEFT: "TOP_LEFT",
//   TOP_RIGHT: "BOTTOM_RIGHT",
//   TOP_LEFT: "BOTTOM_LEFT",
//   MIDDLE_RIGHT: "MIDDLE_LEFT",
//   MIDDLE_LEFT: "MIDDLE_RIGHT",
//   MIDDLE_CENTER: "MIDDLE_CENTER",
// };

// // POSITION CALCULATION FUNCTIONS
// const getPositionCoords = (pos, triggerRect, tooltipRect, gap) => {
//   switch (pos) {
//     case "BOTTOM_CENTER":
//       return {
//         top: triggerRect.bottom + gap,
//         left: triggerRect.left + triggerRect.width / 2 - tooltipRect.width / 2,
//       };
//     case "BOTTOM_RIGHT":
//       return {
//         top: triggerRect.bottom + gap,
//         left: triggerRect.right - tooltipRect.width,
//       };
//     case "BOTTOM_LEFT":
//       return {
//         top: triggerRect.bottom + gap,
//         left: triggerRect.left,
//       };
//     case "TOP_CENTER":
//       return {
//         top: triggerRect.top - tooltipRect.height - gap,
//         left: triggerRect.left + triggerRect.width / 2 - tooltipRect.width / 2,
//       };
//     case "TOP_RIGHT":
//       return {
//         top: triggerRect.top - tooltipRect.height - gap,
//         left: triggerRect.right - tooltipRect.width,
//       };
//     case "TOP_LEFT":
//       return {
//         top: triggerRect.top - tooltipRect.height - gap,
//         left: triggerRect.left,
//       };
//     case "MIDDLE_RIGHT":
//       return {
//         top: triggerRect.top + triggerRect.height / 2 - tooltipRect.height / 2,
//         left: triggerRect.right + gap,
//       };
//     case "MIDDLE_LEFT":
//       return {
//         top: triggerRect.top + triggerRect.height / 2 - tooltipRect.height / 2,
//         left: triggerRect.left - tooltipRect.width - gap,
//       };
//     case "MIDDLE_CENTER":
//       return {
//         top: triggerRect.top + triggerRect.height / 2 - tooltipRect.height / 2,
//         left: triggerRect.left + triggerRect.width / 2 - tooltipRect.width / 2,
//       };
//     default:
//       return null;
//   }
// };

// // VIEWPORT VALIDATION
// const isPositionInViewport = (
//   coords,
//   tooltipRect,
//   viewportWidth,
//   viewportHeight
// ) => {
//   if (!coords) return false;
//   return (
//     coords.top >= 0 &&
//     coords.left >= 0 &&
//     coords.top + tooltipRect.height <= viewportHeight &&
//     coords.left + tooltipRect.width <= viewportWidth
//   );
// };

// // OVERLAP VALIDATION
// const isPositionNotOverlapping = (
//   coords,
//   pos,
//   tooltipRect,
//   triggerRect,
//   trigger,
//   tooltip
// ) => {
//   if (pos === "MIDDLE_CENTER") {
//     const triggerCenter = {
//       x: triggerRect.left + triggerRect.width / 2,
//       y: triggerRect.top + triggerRect.height / 2,
//     };
//     if (
//       coords.left <= triggerCenter.x &&
//       coords.left + tooltipRect.width >= triggerCenter.x &&
//       coords.top <= triggerCenter.y &&
//       coords.top + tooltipRect.height >= triggerCenter.y
//     ) {
//       return false;
//     }
//   }

//   const tooltipArea = {
//     top: coords.top,
//     left: coords.left,
//     width: tooltipRect.width,
//     height: tooltipRect.height,
//   };

//   return !hasOverlap(tooltipArea, [trigger, tooltip]);
// };

// // OVERLAP DETECTION UTILITY
// function hasOverlap(elementRect, excludeElements = []) {
//   if (!elementRect || elementRect.width <= 0 || elementRect.height <= 0)
//     return false;

//   const points = [
//     { x: elementRect.left, y: elementRect.top },
//     { x: elementRect.left + elementRect.width, y: elementRect.top },
//     { x: elementRect.left, y: elementRect.top + elementRect.height },
//     {
//       x: elementRect.left + elementRect.width,
//       y: elementRect.top + elementRect.height,
//     },
//     { x: elementRect.left + elementRect.width / 2, y: elementRect.top },
//     {
//       x: elementRect.left + elementRect.width,
//       y: elementRect.top + elementRect.height / 2,
//     },
//     {
//       x: elementRect.left + elementRect.width / 2,
//       y: elementRect.top + elementRect.height,
//     },
//     { x: elementRect.left, y: elementRect.top + elementRect.height / 2 },
//     {
//       x: elementRect.left + elementRect.width / 2,
//       y: elementRect.top + elementRect.height / 2,
//     },
//   ];

//   return points.some((point) => {
//     const elements = document.elementsFromPoint(point.x, point.y);
//     return elements.some((el) => {
//       return (
//         el !== document.body &&
//         !el.classList.contains("tooltip") &&
//         !excludeElements.includes(el) &&
//         !el.contains(excludeElements[0])
//       );
//     });
//   });
// }

// export const useTooltip = ({
//   content,
//   tooltipPosition,
//   withTip,
//   disabled,
//   iconOnly,
//   delay = 500,
//   gap = 8,
//   avoidOverlapping = false,
// }) => {
//   const triggerRef = useRef(null);
//   const tooltipRef = useRef(null);
//   const [visible, setVisible] = useState(false);
//   const [show, setShow] = useState(false);
//   const [style, setStyle] = useState({ opacity: 0 });
//   const [position, setPosition] = useState("BOTTOM_CENTER");
//   const id = useId();
//   const tooltipId = `tooltip-${id}`;
//   const triggerId = `tooltip-trigger-${id}`;

//   useEffect(() => {
//     let timeout;

//     if (visible) {
//       timeout = setTimeout(
//         () => {
//           setShow(true);
//           if (globalAnimationEnabled) globalAnimationEnabled = false;
//           resetAnimationSession();
//         },
//         globalAnimationEnabled ? delay : 0
//       );
//     } else {
//       setShow(false);
//       resetAnimationSession();
//     }

//     const handleScroll = () => setVisible(false);
//     const handleKeyDown = (e) => {
//       if (e.key === "Escape") setVisible(false);
//     };

//     if (visible) {
//       window.addEventListener("scroll", handleScroll, true);
//       window.addEventListener("keydown", handleKeyDown);
//     }

//     return () => {
//       clearTimeout(timeout);
//       window.removeEventListener("scroll", handleScroll, true);
//       window.removeEventListener("keydown", handleKeyDown);
//     };
//   }, [visible, delay]);

//   useLayoutEffect(() => {
//     if (!show || disabled) return;

//     const trigger = triggerRef.current;
//     const tooltip = tooltipRef.current;
//     if (!trigger || !tooltip) return;

//     const triggerRect = trigger.getBoundingClientRect();
//     if (!triggerRect || triggerRect.width === 0 || triggerRect.height === 0)
//       return;

//     const viewportHeight = window.innerHeight;
//     const viewportWidth = window.innerWidth;

//     // Temporary style override for accurate measurement
//     const originalStyles = {
//       display: tooltip.style.display,
//       visibility: tooltip.style.visibility,
//       position: tooltip.style.position,
//     };
//     tooltip.style.display = "block";
//     tooltip.style.visibility = "hidden";
//     tooltip.style.position = "fixed";

//     const tooltipRect = {
//       width: tooltip.offsetWidth,
//       height: tooltip.offsetHeight,
//     };

//     Object.assign(tooltip.style, originalStyles);
//     if (tooltipRect.width <= 0 || tooltipRect.height <= 0) return;

//     const tryPosition = (pos) => {
//       const coords = getPositionCoords(pos, triggerRect, tooltipRect, gap);
//       if (!coords) return { isValid: false };

//       const inViewport = isPositionInViewport(
//         coords,
//         tooltipRect,
//         viewportWidth,
//         viewportHeight
//       );
//       const notOverlapping = avoidOverlapping
//         ? isPositionNotOverlapping(
//             coords,
//             pos,
//             tooltipRect,
//             triggerRect,
//             trigger,
//             tooltip
//           )
//         : true;

//       return { coords, pos, isValid: inViewport && notOverlapping };
//     };

//     // 1. FIRST PRIORITY: User-specified position (if provided)
//     if (tooltipPosition) {
//       const { coords, pos, isValid } = tryPosition(tooltipPosition);
//       if (isValid) {
//         setStyle({ ...coords, opacity: 1 });
//         setPosition(pos);
//         return;
//       }

//       // 2. SECOND PRIORITY: Mirror position (if user position fails)
//       const mirrorPos = POSITION_MIRROR[tooltipPosition];
//       if (mirrorPos) {
//         const {
//           coords: mirrorCoords,
//           pos: mirrorPosFinal,
//           isValid: mirrorValid,
//         } = tryPosition(mirrorPos);
//         if (mirrorValid) {
//           setStyle({ ...mirrorCoords, opacity: 1 });
//           setPosition(mirrorPosFinal);
//           return;
//         }
//       }
//     }

//     // 3. THIRD PRIORITY: Check all priority positions (always when no tooltipPosition provided)
//     for (const pos of POSITION_PRIORITY) {
//       const { coords, pos: validPos, isValid } = tryPosition(pos);
//       if (isValid) {
//         setStyle({ ...coords, opacity: 1 });
//         setPosition(validPos);
//         return;
//       }
//     }

//     // 4. FINAL FALLBACK: Use clamped position (should rarely be needed)
//     const fallbackPos = tooltipPosition || "BOTTOM_CENTER";
//     const fallbackCoords = getPositionCoords(
//       fallbackPos,
//       triggerRect,
//       tooltipRect,
//       gap
//     ) || { top: 0, left: 0 };
//     setStyle({
//       ...fallbackCoords,
//       top: Math.max(
//         0,
//         Math.min(fallbackCoords.top, viewportHeight - tooltipRect.height)
//       ),
//       left: Math.max(
//         0,
//         Math.min(fallbackCoords.left, viewportWidth - tooltipRect.width)
//       ),
//       opacity: 1,
//     });
//     setPosition(fallbackPos);
//   }, [show, disabled, gap, avoidOverlapping, tooltipPosition]);

//   const tooltipProps = {
//     ref: triggerRef,
//     id: triggerId,
//     "aria-describedby": !disabled && content ? tooltipId : undefined,
//     ...(iconOnly && { "aria-label": content }),
//     onMouseEnter: () => !disabled && setVisible(true),
//     onMouseLeave: () => setVisible(false),
//     onFocus: () => !disabled && setVisible(true),
//     onBlur: () => setVisible(false),
//     onKeyDown: (e) => {
//       if (e.key === "Escape") setVisible(false);
//     },
//   };

//   const renderTooltip = () =>
//     show && content
//       ? createPortal(
//           <div
//             ref={tooltipRef}
//             id={tooltipId}
//             role="tooltip"
//             aria-hidden={!visible}
//             className="tooltip"
//             style={{
//               position: "fixed",
//               pointerEvents: "none",
//               zIndex: 9999,
//               background: "#37324A",
//               color: "#fff",
//               padding: "8px 12px",
//               borderRadius: "0.25rem",
//               fontSize: "0.875rem",
//               minWidth: "2rem",
//               maxWidth: "28.375rem",
//               boxShadow: "0px 4px 4px rgba(0,0,0,0.25)",
//               transform: globalAnimationEnabled ? "scale(0.95)" : "scale(1)",
//               transition: globalAnimationEnabled
//                 ? "opacity 0.2s ease, transform 0.2s ease"
//                 : "opacity 0.1s ease",
//               ...style,
//               opacity: visible ? 1 : 0,
//             }}
//           >
//             <div
//               aria-live="polite"
//               style={{
//                 display: "-webkit-box",
//                 WebkitLineClamp: 3,
//                 WebkitBoxOrient: "vertical",
//                 overflow: "hidden",
//                 textOverflow: "ellipsis",
//                 whiteSpace: "normal",
//               }}
//             >
//               {content}
//             </div>

//             {withTip && (
//               <div
//                 style={{
//                   position: "absolute",
//                   width: 0,
//                   height: 0,
//                   ...(position.startsWith("TOP") && {
//                     borderLeft: "5px solid transparent",
//                     borderRight: "5px solid transparent",
//                     borderTop: "5px solid #37324A",
//                     top: "100%",
//                     ...(position.endsWith("CENTER") && {
//                       left: "50%",
//                       transform: "translateX(-50%)",
//                     }),
//                     ...(position.endsWith("LEFT") && { left: "10px" }),
//                     ...(position.endsWith("RIGHT") && { right: "10px" }),
//                   }),
//                   ...(position.startsWith("BOTTOM") && {
//                     borderLeft: "5px solid transparent",
//                     borderRight: "5px solid transparent",
//                     borderBottom: "5px solid #37324A",
//                     bottom: "100%",
//                     ...(position.endsWith("CENTER") && {
//                       left: "50%",
//                       transform: "translateX(-50%)",
//                     }),
//                     ...(position.endsWith("LEFT") && { left: "10px" }),
//                     ...(position.endsWith("RIGHT") && { right: "10px" }),
//                   }),
//                   ...(position === "MIDDLE_LEFT" && {
//                     borderTop: "5px solid transparent",
//                     borderBottom: "5px solid transparent",
//                     borderLeft: "5px solid #37324A",
//                     left: "100%",
//                     top: "50%",
//                     transform: "translateY(-50%)",
//                   }),
//                   ...(position === "MIDDLE_RIGHT" && {
//                     borderTop: "5px solid transparent",
//                     borderBottom: "5px solid transparent",
//                     borderRight: "5px solid #37324A",
//                     right: "100%",
//                     top: "50%",
//                     transform: "translateY(-50%)",
//                   }),
//                   ...(position === "MIDDLE_CENTER" && {
//                     borderLeft: "5px solid transparent",
//                     borderRight: "5px solid transparent",
//                     borderTop: "5px solid #37324A",
//                     top: "100%",
//                     left: "50%",
//                     transform: "translateX(-50%)",
//                   }),
//                 }}
//               />
//             )}
//           </div>,
//           document.body
//         )
//       : null;

//   return { tooltipProps, renderTooltip };
// };
